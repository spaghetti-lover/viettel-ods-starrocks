version: "3.3"

x-common: &airflow-common
  build:
    context: ./docker/airflow
    dockerfile: Dockerfile
  user: "${AIRFLOW_UID:-50000}:0"
  env_file:
    - .env
  volumes:
    - ./code/ecommerce:/usr/local/lib/python3.10/site-packages/ecommerce
    - ./pipeline/dags:/opt/airflow/dags
    - ./data/airflow/logs:/opt/airflow/logs
    - ./data/airflow/config:/opt/airflow/config
    - ./data/airflow/plugins:/opt/airflow/plugins
    - ./data/airflow/data:/data
  networks:
    - services

services:
  airflow-postgres:
    image: postgres:16-alpine
    container_name: postgres_airflow
    hostname: postgres_airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    networks:
      - services
    environment:
      - POSTGRES_USER=${POSTGRES_AIRFLOW_USER:-airflow}
      - POSTGRES_PASSWORD=${POSTGRES_AIRFLOW_PASSWORD:-airflow}
      - POSTGRES_DB=${POSTGRES_AIRFLOW_DB:-airflow}

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    restart: on-failure
    ports:
      - "13006:8793"
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    restart: always
    command: webserver
    ports:
      - "13005:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    depends_on:
      airflow-postgres:
        condition: service_healthy
      grafana:
        condition: service_started
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version

networks:
  services:
    name: service_network_starrock
